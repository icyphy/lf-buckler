target C {
    threading: false,
    cmake: false,
    build: "../scripts/build_nrf_unix.sh"   
};

/**
* Kobuki BLE Service Demo
* The demo advertises sensor data over ble
* Uses commands written to the drive char to control robot state changes
**/

preamble {=
    #include <math.h>
    #include <stdbool.h>
    #include <stdint.h>
    #include <stdio.h>

    #include "app_error.h"
    #include "app_timer.h"
    #include "nrf.h"
    #include "nrf_delay.h"
    #include "nrf_gpio.h"
    #include "nrf_log.h"
    #include "nrf_log_ctrl.h"
    #include "nrf_log_default_backends.h"
    #include "nrf_pwr_mgmt.h"
    #include "nrf_drv_spi.h"

    #include "buckler.h"
    #include "display.h"
    #include "kobukiActuator.h"
    #include "kobukiSensorPoll.h"
    #include "kobukiSensorTypes.h"
    #include "kobukiUtilities.h"
    #include "lsm9ds1.h"
    #include "simple_ble.h"

    // NOTE: UUID Generator https://www.uuidgenerator.net/

    NRF_TWI_MNGR_DEF(twi_mngr_instance, 5, 0);
    const nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);
    // Intervals for advertising and connections
    static simple_ble_config_t ble_config = {
            // c0:98:e5:49:xx:xx
            .platform_id       = 0x49,    // used as 4th octect in device BLE address
            .device_id         = 0xAABB, // TODO: replace with your lab bench number
            .adv_name          = "ROMI", // used in advertisements if there is room
            .adv_interval      = MSEC_TO_UNITS(100, UNIT_0_625_MS),
            .min_conn_interval = MSEC_TO_UNITS(100, UNIT_1_25_MS),
            .max_conn_interval = MSEC_TO_UNITS(200, UNIT_1_25_MS),
    };

    //85e43f4d-b4a7-4c6f-ba86-2db3c40a2c83
    static simple_ble_service_t kobuki_service = {{
        .uuid128 = {0x83,0x2c,0x0a,0xc4,0xb3,0x2d,0x86,0xba,
                    0x6f,0x4c,0xa7,0xb4,0x4d,0x3f,0xe4,0x85}
    }};
    // characteristics
    static simple_ble_char_t drive_state_char = {.uuid16 = 0x7182};
    static simple_ble_char_t sensor_state_char = {.uuid16 = 0x448d};
    const simple_ble_app_t* simple_ble_app;
=}

reactor Robot {
    input clck:int;

    // drive actions
    logical action up;
    logical action down;
    logical action left;
    logical action right;
    logical action none;

    state sensor_cache:KobukiSensors_t({={0}=});
    // TODO: schedule drive actions using callback
    state dirs:bool[4](false, false, false, false);

    initial mode INIT {
        reaction(startup) -> OFF {=
            ret_code_t error_code = NRF_SUCCESS;

            // initialize RTT library
            error_code = NRF_LOG_INIT(NULL);
            APP_ERROR_CHECK(error_code);
            NRF_LOG_DEFAULT_BACKENDS_INIT();
            printf("Log initialized!\n");

            // initialize LEDs
            nrf_gpio_pin_dir_set(23, NRF_GPIO_PIN_DIR_OUTPUT);
            nrf_gpio_pin_dir_set(24, NRF_GPIO_PIN_DIR_OUTPUT);
            nrf_gpio_pin_dir_set(25, NRF_GPIO_PIN_DIR_OUTPUT);

            // initialize display
            nrf_drv_spi_config_t spi_config = {
            .sck_pin = BUCKLER_LCD_SCLK,
            .mosi_pin = BUCKLER_LCD_MOSI,
            .miso_pin = BUCKLER_LCD_MISO,
            .ss_pin = BUCKLER_LCD_CS,
            .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
            .orc = 0,
            .frequency = NRF_DRV_SPI_FREQ_4M,
            .mode = NRF_DRV_SPI_MODE_2,
            .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
            };
            error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
            APP_ERROR_CHECK(error_code);
            display_init(&spi_instance);
            display_write("Hello, Human!", DISPLAY_LINE_0);
            printf("Display initialized!\n");

            // initialize i2c master (two wire interface)
            nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
            i2c_config.scl = BUCKLER_SENSORS_SCL;
            i2c_config.sda = BUCKLER_SENSORS_SDA;
            i2c_config.frequency = NRF_TWIM_FREQ_100K;
            error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
            APP_ERROR_CHECK(error_code);
            lsm9ds1_init(&twi_mngr_instance);
            printf("IMU initialized!\n");

            // setup ble
            simple_ble_app = simple_ble_init(&ble_config);
            simple_ble_add_service(&kobuki_service);
            
            // drive state char
            simple_ble_add_characteristic(1, 1, 0, 0,
                sizeof(self->dirs), (uint8_t*)(self->dirs), 
                &kobuki_service, &drive_state_char);

            // sensor state char
            simple_ble_add_characteristic(1, 1, 0, 0,
                sizeof(KobukiSensors_t), (uint8_t*)&(self->sensor_cache), 
                &kobuki_service, &sensor_state_char);

            // start advertising
            simple_ble_adv_only_name();

            // initialize Kobuki
            kobukiInit();
            printf("Kobuki initialized!\n");
            if (error_code == NRF_SUCCESS) {
                SET_MODE(OFF);                
            }
        =}
    }
    // sensor poll reaction
    // check ble for drive commands
    // write ble sensor data
    reaction(clck) -> up, down, left, right, none {=
        kobukiSensorPoll(&(self->sensor_cache));
        bool event_present = false;
        if ((self->dirs)[0]) {
            lf_schedule(up, 0);
            event_present = true;
        }
        if ((self->dirs)[1]) {
            lf_schedule(down, 0);
            event_present = true;
        }
        if ((self->dirs)[2]) {
            lf_schedule(left, 0);
            event_present = true;
        }
        if ((self->dirs)[3]) {
            lf_schedule(right, 0);
            event_present = true;
        }
        if (!event_present) {
            lf_schedule(none, 0);
        }
    =}

    mode OFF {
        reaction(clck) {=
            display_write("OFF", DISPLAY_LINE_0);
            kobukiDriveDirect(0, 0);
        =}
        // multi key precedence
        reaction(up) -> FORWARD {=
            SET_MODE(FORWARD);
        =}
        reaction(down) -> BACKWARD {=
            SET_MODE(BACKWARD);
        =}
        reaction(left) -> TURN_LEFT {=
            SET_MODE(TURN_LEFT);
        =}
        reaction(right) -> TURN_RIGHT {=
            SET_MODE(TURN_RIGHT);
        =}
    }
    mode FORWARD {
        reaction(clck) {=
            display_write("FORWARD", DISPLAY_LINE_0);
            printf("FORWARD\n");
            kobukiDriveDirect(60, 60);
        =}
        reaction(up) -> FORWARD {=
            SET_MODE(FORWARD);
        =}
        reaction(none) -> OFF {=
            SET_MODE(OFF);
        =}
    }
    mode BACKWARD {
        reaction(clck) {=
            display_write("BACKWARD", DISPLAY_LINE_0);
            printf("BACKWARD\n");
            kobukiDriveDirect(-60, -60);
        =}
        reaction(down) -> BACKWARD {=
            SET_MODE(BACKWARD);
        =}
         reaction(none) -> OFF {=
            SET_MODE(OFF);
        =}
    }
    mode TURN_LEFT {
        reaction(clck) {=
            display_write("LEFT", DISPLAY_LINE_0);
            printf("LEFT\n");
            kobukiDriveDirect(-60, 60);
        =}
        reaction(left) -> TURN_LEFT {=
            SET_MODE(TURN_LEFT);
        =}
         reaction(none) -> OFF {=
            SET_MODE(OFF);
        =}
    }
    mode TURN_RIGHT {
        reaction(clck) {=
            display_write("RIGHT", DISPLAY_LINE_0);
            printf("RIGHT\n");
            kobukiDriveDirect(60, -60);
        =}
        reaction(right) -> TURN_RIGHT {=
            SET_MODE(TURN_RIGHT);
        =}
         reaction(none) -> OFF {=
            SET_MODE(OFF);
        =}
    }
}

main reactor {
    timer t(1 sec, 10 msec);
    robo = new Robot();
    reaction(t) -> robo.clck {=
        SET(robo.clck, 1);
    =}
}
