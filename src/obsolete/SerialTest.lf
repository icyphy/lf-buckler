target C {
    threading: false,
    cmake: false,
    build: "../scripts/build_nrf_unix.sh"
};

preamble {=
    #include <math.h>
    #include <stdbool.h>
    #include <stdint.h>
    #include <stdio.h>

    #include "app_error.h"
    #include "app_timer.h"
    #include "nrf.h"
    #include "nrf_delay.h"
    #include "nrf_gpio.h"
    #include "nrf_log.h"
    #include "nrf_log_ctrl.h"
    #include "nrf_log_default_backends.h"
    #include "nrf_pwr_mgmt.h"
    #include "nrf_drv_spi.h"

    #include "buckler.h"
    #include "display.h"
    #include "kobukiActuator.h"
    #include "kobukiSensorPoll.h"
    #include "kobukiSensorTypes.h"
    #include "kobukiUtilities.h"
    #include "lsm9ds1.h"

    KobukiSensors_t sensors;
    NRF_TWI_MNGR_DEF(twi_mngr_instance, 5, 0);

    int init(void) {
        ret_code_t error_code = NRF_SUCCESS;

        // initialize RTT library
        error_code = NRF_LOG_INIT(NULL);
        APP_ERROR_CHECK(error_code);
        NRF_LOG_DEFAULT_BACKENDS_INIT();
        printf("Log initialized!\n");

        // initialize LEDs
        nrf_gpio_pin_dir_set(23, NRF_GPIO_PIN_DIR_OUTPUT);
        nrf_gpio_pin_dir_set(24, NRF_GPIO_PIN_DIR_OUTPUT);
        nrf_gpio_pin_dir_set(25, NRF_GPIO_PIN_DIR_OUTPUT);

        // initialize display
        nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);
        nrf_drv_spi_config_t spi_config = {
        .sck_pin = BUCKLER_LCD_SCLK,
        .mosi_pin = BUCKLER_LCD_MOSI,
        .miso_pin = BUCKLER_LCD_MISO,
        .ss_pin = BUCKLER_LCD_CS,
        .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
        .orc = 0,
        .frequency = NRF_DRV_SPI_FREQ_4M,
        .mode = NRF_DRV_SPI_MODE_2,
        .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
        };
        error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
        APP_ERROR_CHECK(error_code);
        display_init(&spi_instance);
        display_write("Hello, Human!", DISPLAY_LINE_0);
        printf("Display initialized!\n");

        // initialize i2c master (two wire interface)
        nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
        i2c_config.scl = BUCKLER_SENSORS_SCL;
        i2c_config.sda = BUCKLER_SENSORS_SDA;
        i2c_config.frequency = NRF_TWIM_FREQ_100K;
        error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
        APP_ERROR_CHECK(error_code);
        lsm9ds1_init(&twi_mngr_instance);
        printf("IMU initialized!\n");

        // initialize Kobuki
        kobukiInit();
        printf("Kobuki initialized!\n");
        return 0;
    }

=}

main reactor {
    timer t(0, 10 msec);
    state toggle:int(0);
    
    reaction(t) {=
        // timing debug
        instant_t logical = lf_time_logical();
        printf("Logical Time %lld.\n", logical);

        instant_t physical = lf_time_physical();
        printf("Physical time is %lld.\n", physical);

        // sensor poll
        kobukiSensorPoll(&sensors);
        self->toggle ^= is_button_pressed(&sensors);
        if (self->toggle) {
            display_write("ON", DISPLAY_LINE_0);
        } else {
            display_write("OFF", DISPLAY_LINE_0);
        }
    =}

}
