/** 
 * Print the output of the IMU (inertial measurement unit) periodically.
 */
target C {
    threading: false,
    build: "../scripts/build_nrf_unix.sh",
};
import IMU from "lib/IMU.lf";
import AngleConverter from "lib/AngleConverter.lf";
import Display from "lib/Display.lf";

reactor Printer {
    input acc:lsm9ds1_measurement_t;
    input gyro:lsm9ds1_measurement_t;
    input mag:lsm9ds1_measurement_t;
    
    reaction(acc, gyro, mag) {=
        printf("             n        X-Axis\t    Y-Axis\t    Z-Axis\n");
        printf("                  ----------\t----------\t----------\n");
        if(acc->is_present) {
            printf("Acceleration (g): %10.3f\t%10.3f\t%10.3f\n", acc->value.x_axis, acc->value.y_axis, acc->value.z_axis);            
        }
        if (gyro->is_present) {
            printf("Angle  (degrees): %10.3f\t%10.3f\t%10.3f\n", gyro->value.x_axis, gyro->value.y_axis, gyro->value.z_axis);
        }
        if (mag->is_present) {
            printf("Magnetism   (uT): %10.3f\t%10.3f\t%10.3f\n", mag->value.x_axis, mag->value.y_axis, mag->value.z_axis);
        }
        printf("\n");        
    =}
}

main reactor {
    timer t(0, 100 msec);
    imu = new IMU();
    print = new Printer();
    convert = new AngleConverter();
    dx = new Display(row = 0);
    dy = new Display(row = 1);
    reaction(t) -> imu.trigger {=
        lf_set(imu.trigger, true);
    =}
    reaction(convert.angle) -> dx.message, dy.message {=
        static char x[BUCKLER_DISPLAY_WIDTH + 1];
        snprintf(x, BUCKLER_DISPLAY_WIDTH + 1, "x:%4.0f z:%4.0f",
            convert.angle->value.x_axis, convert.angle->value.z_axis
        );
        lf_set(dx.message, x);
        static char y[BUCKLER_DISPLAY_WIDTH + 1];
        snprintf(y, BUCKLER_DISPLAY_WIDTH + 1, "y:%4.0f",
            convert.angle->value.y_axis
        );
        lf_set(dy.message, y);
    =}
    imu.acc -> print.acc;
    imu.gyro -> convert.gyro;
    convert.angle -> print.gyro;
    imu.mag -> print.mag;
}