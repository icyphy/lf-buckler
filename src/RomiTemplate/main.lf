target C {
    threading: false,
    cmake: false,
    build: "../../scripts/build_nrf_unix.sh romi_template.lf"
};

import Controller from "controller.lf"

preamble {=
    // dependencies
    #include <math.h>
    #include <stdbool.h>
    #include <stdint.h>
    #include <stdio.h>

    #include "app_error.h"
    #include "app_timer.h"
    #include "nrf.h"
    #include "nrf_delay.h"
    #include "nrf_gpio.h"
    #include "nrf_log.h"
    #include "nrf_log_ctrl.h"
    #include "nrf_log_default_backends.h"
    #include "nrf_pwr_mgmt.h"
    #include "nrf_drv_spi.h"

    #include "buckler.h"
    #include "display.h"
    #include "kobukiActuator.h"
    #include "kobukiSensorPoll.h"
    #include "kobukiSensorTypes.h"
    #include "kobukiUtilities.h"
    #include "lsm9ds1.h"
    #include "states.h"
    
    // function definitions
    // startup reactor here
    // import robot control reactor
=}

reactor Loop {
    input new_state:robot_state_t
    output prev_state:robot_state_t

    state next_state:robot_state_t({=OFF=})
    timer loop_timer(0, 10 msec)

    reaction(startup) -> prev_state {=
        // initialize RTT library
        error_code = NRF_LOG_INIT(NULL);
        APP_ERROR_CHECK(error_code);
        NRF_LOG_DEFAULT_BACKENDS_INIT();
        printf("Log initialized!\n");

        // initialize LEDs
        nrf_gpio_pin_dir_set(23, NRF_GPIO_PIN_DIR_OUTPUT);
        nrf_gpio_pin_dir_set(24, NRF_GPIO_PIN_DIR_OUTPUT);
        nrf_gpio_pin_dir_set(25, NRF_GPIO_PIN_DIR_OUTPUT);

        // initialize display
        nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);
        nrf_drv_spi_config_t spi_config = {
            .sck_pin = BUCKLER_LCD_SCLK,
            .mosi_pin = BUCKLER_LCD_MOSI,
            .miso_pin = BUCKLER_LCD_MISO,
            .ss_pin = BUCKLER_LCD_CS,
            .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
            .orc = 0,
            .frequency = NRF_DRV_SPI_FREQ_4M,
            .mode = NRF_DRV_SPI_MODE_2,
            .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
        };
        error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
        APP_ERROR_CHECK(error_code);
        display_init(&spi_instance);
        display_write("Hello, Human!", DISPLAY_LINE_0);
        printf("Display initialized!\n");

        // initialize i2c master (two wire interface)
        nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
        i2c_config.scl = BUCKLER_SENSORS_SCL;
        i2c_config.sda = BUCKLER_SENSORS_SDA;
        i2c_config.frequency = NRF_TWIM_FREQ_100K;
        error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
        APP_ERROR_CHECK(error_code);
        lsm9ds1_init(&twi_mngr_instance);
        printf("IMU initialized!\n");

        // initialize Kobuki
        kobukiInit();
        printf("Kobuki initialized!\n");
        
    =}
    // timed invocation of next logical iteration
    reaction(loop_timer) -> prev_state {=
        SET(prev_state, self->next_state)
    =}
    // queue the next state
    reaction(new_state) {=
        self->next_state = new_state->value
    =}

}

main reactor {
    init_routine = new Loop();
    control = new Controller();
    control.new_state -> init_routine.new_state
    init_routine.prev_state -> control.prev_state
}