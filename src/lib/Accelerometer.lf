/**
 * Reactor that outputs accelerometer readings.
 * @author Edward A. Lee
 */
target C;

preamble {=
    #include "app_error.h"
    #include "nrf.h"
    #include "nrf_delay.h"
    #include "nrf_gpio.h"
    #include "nrf_log.h"
    #include "nrf_log_ctrl.h"
    #include "nrf_log_default_backends.h"
    #include "nrf_pwr_mgmt.h"
    #include "nrf_serial.h"
    #include "nrfx_gpiote.h"
    #include "nrfx_saadc.h"
    
    #include "buckler.h"
    
    // ADC channels
    #define X_CHANNEL 0
    #define Y_CHANNEL 1
    #define Z_CHANNEL 2
    
    // callback for SAADC events
    void saadc_callback (nrfx_saadc_evt_t const * p_event) {
      // don't care about adc callbacks
    }
    
    // sample a particular analog channel in blocking mode
    nrf_saadc_value_t sample_value (uint8_t channel) {
      nrf_saadc_value_t val;
      ret_code_t error_code = nrfx_saadc_sample_convert(channel, &val);
      APP_ERROR_CHECK(error_code);
      return val;
    }
    
    // Global variable to prevent initializing more than once.
    bool buckler_accelerometer_initialized = false;
=}

/**
 * Display a message on row 0 or 1 of the Buckler LCD display.
 */
reactor Accelerometer(row:int(0)) {
    input trigger:bool;
    output x:nrf_saadc_value_t;
    output y:nrf_saadc_value_t;
    output z:nrf_saadc_value_t;
    
    reaction(startup) {=
        if (buckler_accelerometer_initialized) return;
        buckler_accelerometer_initialized = true;
        
        // initialize analog to digital converter
        nrfx_saadc_config_t saadc_config = NRFX_SAADC_DEFAULT_CONFIG;
        saadc_config.resolution = NRF_SAADC_RESOLUTION_12BIT;
        ret_code_t error_code = nrfx_saadc_init(&saadc_config, saadc_callback);
        APP_ERROR_CHECK(error_code);
    
        // initialize analog inputs
        // configure with 0 as input pin for now
        nrf_saadc_channel_config_t channel_config = NRFX_SAADC_DEFAULT_CHANNEL_CONFIG_SE(0);
        channel_config.gain = NRF_SAADC_GAIN1_6; // input gain of 1/6 Volts/Volt, multiply incoming signal by (1/6)
        channel_config.reference = NRF_SAADC_REFERENCE_INTERNAL; // 0.6 Volt reference, input after gain can be 0 to 0.6 Volts
    
        // specify input pin and initialize that ADC channel
        channel_config.pin_p = BUCKLER_ANALOG_ACCEL_X;
        error_code = nrfx_saadc_channel_init(X_CHANNEL, &channel_config);
        APP_ERROR_CHECK(error_code);
    
        // specify input pin and initialize that ADC channel
        channel_config.pin_p = BUCKLER_ANALOG_ACCEL_Y;
        error_code = nrfx_saadc_channel_init(Y_CHANNEL, &channel_config);
        APP_ERROR_CHECK(error_code);
    
        // specify input pin and initialize that ADC channel
        channel_config.pin_p = BUCKLER_ANALOG_ACCEL_Z;
        error_code = nrfx_saadc_channel_init(Z_CHANNEL, &channel_config);
        APP_ERROR_CHECK(error_code);
    =}
    reaction(trigger) -> x, y, z {=
        if (trigger->value) {
            // Sample analog inputs.
            lf_set(x, sample_value(X_CHANNEL));
            lf_set(y, sample_value(Y_CHANNEL));
            lf_set(z, sample_value(Z_CHANNEL));
        }
    =}
}
