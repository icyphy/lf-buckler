/** 
 * Convert a gyroscope reading in degrees per second into an
 * angle measurement in degrees. For convenient use with the
 * `lib/IMU.lf` reactor, the input and output datatypes are
 * are a struct called `lsm9ds1_measurement_t` which has three
 * fields, `x_axis`, `y_axis`, and `z_axis`, all of which are
 * floats. This converter uses the trapezoidal method for
 * numerical integration.
 */
target C {
    timeout: 10 sec
};

preamble {=
    #include "lsm9ds1.h"      // Defines lsm9ds1_measurement_t
=}

reactor AngleConverter {
    input gyro:lsm9ds1_measurement_t;
    output angle:lsm9ds1_measurement_t;
    
    reset state previous_angle_x:float(0);
    reset state previous_angle_y:float(0);
    reset state previous_angle_z:float(0);
    reset state previous_velocity_x:float(0);
    reset state previous_velocity_y:float(0);
    reset state previous_velocity_z:float(0);
    reset state previous_time:instant_t(-1);
    
    reaction(gyro) -> angle {=
        float x = gyro->value.x_axis;
        float y = gyro->value.y_axis;
        float z = gyro->value.z_axis;
        
        // Convert degrees per second to degrees.
        instant_t current_time = lf_time_logical_elapsed();
        interval_t elapsed_time = 0;
        if (self->previous_time >= 0) {
            elapsed_time = current_time - self->previous_time;
        }
        self->previous_time = current_time;
                
        self->previous_angle_x +=
                (x + self->previous_velocity_x) * (elapsed_time * 1e-9) / 2;
        self->previous_angle_y +=
                (y + self->previous_velocity_y) * (elapsed_time * 1e-9) / 2;
        self->previous_angle_z +=
                (z + self->previous_velocity_z) * (elapsed_time * 1e-9) / 2;
        
        self->previous_velocity_x = x;
        self->previous_velocity_y = y;
        self->previous_velocity_z = z;
        
        lsm9ds1_measurement_t result;
        result.x_axis = self->previous_angle_x;
        result.y_axis = self->previous_angle_y;
        result.z_axis = self->previous_angle_y;
        lf_set(angle, result);
    =}
}
