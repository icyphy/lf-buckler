/**
 * Reactor to display a message on the LCD display.
 * Each instance of this reactor has a parameter that specifies
 * which row of the display to use.
 * 
 * Documentation for the SPI drivers can be found here:
 *     https://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v15.3.0/group__nrf__spi.html
 * 
 * @author Edward A. Lee
 */
target C;

preamble {=
    #include "nrfx_gpiote.h"
    #include "nrfx_spi.h"
    
    #include "buckler.h"    // Defines BUCKLER_LCD_SCLK, etc.
    #include "display.h"    // Defines Buckler display functions and constants.
          
    // Width of the display in characters.
    #define BUCKLER_DISPLAY_WIDTH 16
    
    // The SPI instance has to be global for the display to work across functions.
    // NOTE: display.h in Buckler library uses legacy nrf drivers rather than nrfx.
    // Hence, this type is a legacy type.
    nrf_drv_spi_t spi_instance = NRF_DRV_SPI_INSTANCE(1);

    // Buffer to use to write messages to the display.
    char buckler_message[2][BUCKLER_DISPLAY_WIDTH + 1];
    
    // Flag indicating that SPI has been initialized.
    // This is needed so that there can be multiple instances of this reactor.
    bool buckler_spi_initialized = false;
=}

/**
 * Display a message on row 0 or 1 of the Buckler LCD display.
 * @param row The row.
 */
reactor Display(row:int(0)) {
    input message:string;
    reaction(startup) {=
        ret_code_t error_code = NRF_SUCCESS;

        if (!buckler_spi_initialized) {
            buckler_spi_initialized = true;
            // initialize spi master
            nrf_drv_spi_config_t spi_config = {
                .sck_pin = BUCKLER_LCD_SCLK,
                .mosi_pin = BUCKLER_LCD_MOSI,
                .miso_pin = BUCKLER_LCD_MISO,
                .ss_pin = BUCKLER_LCD_CS,
                .irq_priority = NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY,
                .orc = 0,
                .frequency = NRF_DRV_SPI_FREQ_4M,
                .mode = NRF_DRV_SPI_MODE_2,
                .bit_order = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST
            };
            error_code = nrf_drv_spi_init(&spi_instance, &spi_config, NULL, NULL);
            APP_ERROR_CHECK(error_code);
        
            // initialize display driver
            error_code = display_init(&spi_instance);
            APP_ERROR_CHECK(error_code);
            
            error_code = display_write("Initialized", 0);
            APP_ERROR_CHECK(error_code);
        }
    =}
    reaction(message) {=
        // Copy the message to the global buffer, truncating it at the display width.
        snprintf(buckler_message[self->row], BUCKLER_DISPLAY_WIDTH + 1, "%s", message->value);

        ret_code_t error_code = display_write(buckler_message[self->row], self->row);
        APP_ERROR_CHECK(error_code);
    =}
}
