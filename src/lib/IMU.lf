/**
 * Reactor that outputs inertial measurement unit (IMU) readings.
 * This reactor is based on the sample code in buckler/software/apps/i2c_imu.
 * 
 * @author Edward A. Lee
 */
target C;

preamble {=
    #include "buckler.h"      // Defines ret_code_t, BUCKLER_SENSORS_SCL, BUCKLER_SENSORS_SDA
    #include "nrf_twi_mngr.h" // Defines NRF_DRV_TWI_DEFAULT_CONFIG, NRF_TWIM_FREQ_100K
    #include "lsm9ds1.h"      // Defines lsm9ds1_measurement_t, lsm9ds1_init, etc.
    
    // Global variable to prevent initializing the i2c bus more than once.
    bool i2c_initialized = false;
    
    // Use a library macro to define and initialize a static variable twi_mngr_instance
    // with a queue size of 5 and index 0.
    NRF_TWI_MNGR_DEF(twi_mngr_instance, 5, 0);
=}

/**
 * Reactor that, when triggered, outputs accelerometer, gyroscope,
 * and magnetometer readings of the IMU (inertial measurement unit)
 * on the Buckler board, which is an LSM9DS1 from ST Microelectronics.
 * The datasheet is here:
 * 
 *     https://www.st.com/content/ccc/resource/technical/document/datasheet/1e/3f/2a/d6/25/eb/48/46/DM00103319.pdf/files/DM00103319.pdf/jcr:content/translations/en.DM00103319.pdf
 */
reactor IMU {
    input trigger:bool;
    output acc:lsm9ds1_measurement_t;
    output gyro:lsm9ds1_measurement_t;
    output mag:lsm9ds1_measurement_t;
    
    reaction(startup) {=
        ret_code_t error_code = NRF_SUCCESS;

        if (i2c_initialized) return;
        i2c_initialized = true;
        
        // Initialize I2C bus master (also called TWI, two wire interface)/
        nrf_drv_twi_config_t i2c_config = NRF_DRV_TWI_DEFAULT_CONFIG;
        i2c_config.scl = BUCKLER_SENSORS_SCL;
        i2c_config.sda = BUCKLER_SENSORS_SDA;
        // i2c_config.frequency = NRF_TWIM_FREQ_100K; // Not needed. Same as default.
        error_code = nrf_twi_mngr_init(&twi_mngr_instance, &i2c_config);
        APP_ERROR_CHECK(error_code);
        
        // initialize LSM9DS1 driver
        lsm9ds1_init(&twi_mngr_instance);
    =}
    reaction(trigger) -> acc, gyro, mag {=
        if (trigger->value) {
            lsm9ds1_measurement_t acc_measurement = lsm9ds1_read_accelerometer();
            lsm9ds1_measurement_t gyr_measurement = lsm9ds1_read_gyro();
            lsm9ds1_measurement_t mag_measurement = lsm9ds1_read_magnetometer();
            
            lf_set(acc, acc_measurement);
            lf_set(gyro, gyr_measurement);
            lf_set(mag, mag_measurement);
        }
    =}
}
