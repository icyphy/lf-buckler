target C {
    threading: false,
    cmake: false,
    build: "../scripts/build_nrf_unix.sh"   
};

preamble {=
    #include <math.h>
    #include <stdbool.h>
    #include <stdint.h>
    #include <stdio.h>

    #include "app_error.h"
    #include "app_timer.h"
    #include "nrf.h"
    #include "nrf_delay.h"
    #include "nrf_gpio.h"
    #include "nrf_log.h"
    #include "nrf_log_ctrl.h"
    #include "nrf_log_default_backends.h"
    #include "nrf_pwr_mgmt.h"
    #include "nrf_drv_spi.h"

    #include "simple_ble.h"

    // actuators
    #define LED_1 NRF_GPIO_PIN_MAP(0, 17)

    // sensors
    #define BTN_1 NRF_GPIO_PIN_MAP(0, 13)
    #define BTN_2 NRF_GPIO_PIN_MAP(0, 14)
    #define BTN_3 NRF_GPIO_PIN_MAP(0, 15)
    #define BTN_4 NRF_GPIO_PIN_MAP(0, 16)


    // NOTE: UUID Generator https://www.uuidgenerator.net/

    // Intervals for advertising and connection
    static simple_ble_config_t ble_config = {
            // c0:98:e5:49:xx:xx
            .platform_id       = 0x49,    // used as 4th octect in device BLE address
            .device_id         = 0xAABB, // TODO: replace with your lab bench number
            .adv_name          = "NRF_BOARD", // used in advertisements if there is room
            .adv_interval      = MSEC_TO_UNITS(100, UNIT_0_625_MS),
            .min_conn_interval = MSEC_TO_UNITS(100, UNIT_1_25_MS),
            .max_conn_interval = MSEC_TO_UNITS(200, UNIT_1_25_MS),
    };

    simple_ble_app_t* simple_ble_app;
    uint8_t btn_states[4];
=}



reactor Board {
    input clck:int;

    initial mode INIT {
        reaction(startup) -> LOOP {=
            ret_code_t error_code = NRF_SUCCESS;

            // initialize RTT library
            error_code = NRF_LOG_INIT(NULL);
            APP_ERROR_CHECK(error_code);
            NRF_LOG_DEFAULT_BACKENDS_INIT();
            printf("Log initialized!\n");

            // initialize pins
            nrf_gpio_cfg_output(LED_1);
            nrf_gpio_cfg_input(BTN_1, NRF_GPIO_PIN_PULLUP);
            nrf_gpio_cfg_input(BTN_2, NRF_GPIO_PIN_PULLUP);
            nrf_gpio_cfg_input(BTN_3, NRF_GPIO_PIN_PULLUP);
            nrf_gpio_cfg_input(BTN_4, NRF_GPIO_PIN_PULLUP);

            // setup ble
            simple_ble_app = simple_ble_init(&ble_config);

            // start advertising
            simple_ble_adv_only_name();

            if (error_code == NRF_SUCCESS) {
                SET_MODE(LOOP);                
            }
        =}
    }
    mode LOOP {
        reaction(clck) {=
            printf("DEBUG: clck");
            btn_states[0] = nrf_gpio_pin_read(BTN_1);
            btn_states[1] = nrf_gpio_pin_read(BTN_2);
            btn_states[2] = nrf_gpio_pin_read(BTN_3);
            btn_states[3] = nrf_gpio_pin_read(BTN_4);
            if (btn_states[0]) {
                nrf_gpio_pin_set(LED_1);
            } else {
                nrf_gpio_pin_clear(LED_1);
            }
            simple_ble_adv_manuf_data((uint8_t*) &btn_states, sizeof(btn_states));
        =}
    }
}

main reactor {
    timer t(0, 50 msec);
    board = new Board();
    reaction(t) -> board.clck {=
        SET(board.clck, 1);
    =}
}
